namespace files

include v2_common

struct PhotoInfo:
    doc::
        Photo-specific information derived from EXIF data.

    time_taken DbxTimestamp::
        When the photo was taken.
    lat_long List(data_type=Float) nullable::
        The GPS coordinates where the photo was taken.

    example default:
        time_taken="Sat, 28 Jun 2014 18:23:21"
        lat_long=null

struct VideoInfo:
    doc::
        Video-specific information derived from EXIF data.

    time_taken DbxTimestamp::
        When the photo was taken.
    lat_long List(data_type=Float) nullable::
        The GPS coordinates where the photo was taken.
    duration Float::
        Length of video in milliseconds.

    example default:
        time_taken="Sat, 28 Jun 2014 18:23:21"
        lat_long=null
        duration=3

union MediaInfo:
    doc::
        Media specific information.

    photo PhotoInfo
    video VideoInfo

struct SharedFolder:
    doc::
        Information specific to a shared folder.

    id String::
        The unique identifier for this shared folder.

    example default:
        id="sf123"

# Parent struct for files or folders in a filesystem.
struct BaseFile:
    doc::
        A file or folder entry.

    id String(max_length=40)::
        A unique identifier for the file.
    id_rev UInt64::
        A unique identifier for the current revision of a file. This field is
        the same rev as elsewhere in the API and can be used to detect changes
        and avoid conflicts.
    path String::
        Path to file or folder.
    path_rev UInt64::
        A unique identifier for the current revision of a file path. This field
        is the same rev as elsewhere in the API and can be used to detect changes
        and avoid conflicts.
    shared_folder SharedFolder nullable::
        If this a shared folder, information about it.
    modified DbxTimestamp nullable::
        The last time the file was modified on Dropbox, in the standard Timestamp
        format (:val:`null` for root folder).
    is_deleted Boolean::
        Whether the given entry is deleted.

struct File extends BaseFile:
    doc::
        Describes a file.

    size UInt64::
        File size in bytes.
    mime_type String nullable::
        The Internet media type determined by the file extension.

    optional:
        media_info MediaInfo::
            Information specific to photo and video media.

    example default:
        id="xyz123"
        id_rev=2
        path="/Photos/flower.jpg"
        path_rev=19
        size=1234
        mime_type="image/jpg"
        modified="Sat, 28 Jun 2014 18:23:21"
        is_deleted=false

struct Folder extends BaseFile:
    doc::
        Describes a folder.

    example default:
        id="abc456"
        id_rev=3
        path="/Photos"
        path_rev=20
        modified="Sat, 28 Jun 2014 18:23:21"
        is_deleted=false

union Entry:
    doc::
        A file or folder in a Dropbox.

    file File
    folder Folder

struct FolderAndContents extends Folder:

    contents List(data_type=Entry)::
        Ordered list of all contained files and folders.

    example default:
        id="abc456"
        id_rev=3
        path="/Photos"
        path_rev=20
        modified="Sat, 28 Jun 2014 18:23:21"
        is_deleted=false

struct FolderListRequest:
    doc::
        Stub.

    path String::
        The path to the folder.
    include_deleted Boolean::
        If this parameter is set to :val:`true`, then :field:`contents` will
        include the metadata of deleted children. Note that the target of the
        :op:`folder-list` call is always returned even when it has been deleted
        (with :field:`is_deleted` set to true) regardless of
        this flag.
    include_media_info Boolean::
        If true, each file will include a media_info key.

op Folder-List:
    doc::
        Get the contents of a folder.

    request:
        in1 FolderListRequest

    response:
        folder FolderAndContents

struct InfoRequest:
    doc::
        Describes a path.

    path String::
        The path to the file or folder.
    optional:
        path_rev Rev::
            Specific revision for a given path.

    example default:
        path="/Photos/flower.jpg"

op Info:
    doc::
        Get the info for a file or folder.

    request:
        in1 InfoRequest

    response:
        info Entry

op Download:
    doc::
        Download a file.

    request:
        in1 InfoRequest

    response:
        info File
        data Binary

    extras:
        host="content"
        method="GET"


struct UpdateParentRev:
    doc::
        On a write conflict, overwrite the existing file if the parent rev
        matches.

    parent_rev String::
        The revision to be updated.
    auto_rename Boolean::
        Whether the new file should be renamed on a conflict.

    example default:
        parent_rev="abc123"
        auto_rename=false

union WriteConflictPolicy:
    doc::
        Policy for managing write conflicts.

    reject::
        On a write conflict, reject the new file.
    overwrite::
        On a write conflict, overwrite the existing file.
    rename::
        On a write conflict, rename the new file with a numerical suffix.
    update_if_matching_parent_rev UpdateParentRev::
        On a write conflict, overwrite the existing file.

struct FileUploadRequest:
    doc::
        Stub.

    path String::
        The full path to the file you want to write to. It should not point to a folder.
    write_conflict_policy WriteConflictPolicy::
        Action to take if a file already exists at the specified path.

    example default:
        path="Documents/plan.docx"

union UploadError:
    doc::
        Errors that can be received on error.

    file_exists::
        File already exists.
    bad_path::
        Target folder does not exist.
    user_over_quota::
        The user does not have space in their Dropbox.

op Upload:
    doc::
        Upload a file to Dropbox.

    request:
        in1 FileUploadRequest
        in2 Binary

    response:
        info File

    error:
        UploadError

    extras:
        host="content"

struct DeltaResponse:

    reset Boolean::
        If :val:`true`, clear your local state before processing the delta
        entries. :field:`reset` is always :val:`true` on the initial call to
        :op:`Delta` (i.e. when no cursor is passed in). Otherwise, it is
        :val:`true` in rare situations, such as after server or account
        maintenance, or if a user deletes their app folder.
    cursor String::
        A string that encodes the latest information that has been returned.
        On the next call to :op:`Delta`, pass in this value.
    has_more Boolean::
        If :val:`true`, then there are more entries available; you can call
        :op:`Delta` again immediately to retrieve those entries. If
        :val:`false`, then wait for at least five minutes (preferably longer)
        before checking again.
    entries List(data_type=Entry)::
        Each file or directory that has been changed.


    example default:
        reset=false
        cursor="xyz123"
        has_more=true


struct DeltaRequest:
    doc::
        Delta request.

    cursor String nullable::
        A string that is used to keep track of your current state. On the
        next call pass in this value to return delta entries that have been
        recorded since the cursor was returned.
    path_prefix String nullable::
        Filters the response to only include entries at or under the specified
        path. If you use the path_prefix parameter, you must continue to pass
        the same prefix on subsequent calls using the returned cursor.
    include_media_info Boolean = false::
        If :val:`true`, each file will include a :field:`media_info` key. When
        :field:`include_media_info` is specified, files will only appear in
        delta responses when the media info is ready. If you use the
        :field:`include_media_info` parameter, you must continue to pass the
        same value on subsequent calls using the returned cursor.

    example default:
        cursor=null
        path_prefix=null
        include_media_info=false

op Delta:
    doc::
        A way of letting you keep up with changes to files and folders in a
        user's Dropbox. You can periodically call :op:`Delta` to get a list of
        "delta entries", which are instructions on how to update your local
        state to match the server's state.

    request:
        in1 DeltaRequest

    response:
        info DeltaResponse

struct LongpollDeltaRequest:

    cursor String::
        A delta cursor as returned from a call to :op:`Delta`. Note that a
        cursor returned from a call to :op:`Delta` with
        :field:`include_media_info` set to :val:`true` is incompatible with
        :op:`LongpollDelta` and an error will be returned.

    optional:
        timeout UInt32(min_value=30, max_value=480) = 30::
            An optional integer indicating a timeout, in seconds. The request
            will block for at most this length of time, plus up to 90 seconds
            of random jitter added to avoid the
            :link:`thundering herd problem
            https://en.wikipedia.org/wiki/Thundering_herd_problem`. Care
            should be taken when using this parameter, as some network
            infrastructure does not support long timeouts.

struct LongpollDeltaResponse:
    doc::
        The connection will block until there are changes available or a
        timeout occurs.

    changes Boolean::
        Indicates whether new changes are available. If this value is
        :val:`true`, you should call :op:`Delta` to retrieve the changes.
        If this value is :val:`false`, it means the call to
        :op:`LongpollDelta` timed out.

    optional:
        backoff UInt32::
            If present, the value indicates how many seconds your code should
            wait before calling :op:`LongpollDelta` again.

    example default:
        changes=false
        backoff=60

op LongpollDelta:
    doc::
        A long-poll endpoint to wait for changes on an account. In conjunction
        with :op:`Delta`, this call gives you a low-latency way to monitor an
        account for file changes.

        Unlike most other API endpoints, this call does not require OAuth
        authentication. The passed in :field:`cursor` can only be acquired via
        an authenticated call to :op:`Delta`.

    request:
        in LongpollDeltaRequest

    response:
        out LongpollDeltaResponse

    extras:
        host="notify"
        noauth=true

struct ThumbnailRequest:
    doc::
        Stub.

    format String::
        jpeg (default) or png. For images that are photos, jpeg should be
        preferred, while png is better for screenshots and digital art.

    optional:
        size String = "s"::
            One of the following values: xs, s, m, l, xl.

    example default:
        format="jpeg"
        size="m"

op Thumbnail:
    doc::
        Get the thumbnail for a file.

    request:
        in1 ThumbnailRequest

    response:
        info File
        data Binary

    extras:
        host="content"


struct RevisionHistory:

    revisions List(data_type=Entry)::
        List of file or folders that have been part of the revision history.

op Revisions:
    doc::
        Obtains file information for previous revisions.

        Only revisions up to thirty days old are available (or more if the
        Dropbox user has :link:`Packrat https://www.dropbox.com/help/113`). You can use the revision number in
        conjunction with the :op:`Restore` call to revert the file to its
        previous state.

    request:
        in1 InfoRequest

    response:
        history RevisionHistory

struct RestoreRequest:

    path String::
        The path to the file or folder.
    rev Rev::
        The revision of a path to restore to.

op Restore:
    doc::
        Restores a file path to a previous revision.

        Unlike downloading a file at a given revision and then re-uploading it,
        this call is atomic. It also saves a bunch of bandwidth.

    request:
        in RestoreRequest

    response:
        out File

struct SearchRequest:

    query String::
        The search string. This string is split (on spaces) into individual
        words. Files and folders will be returned if they contain all words
        in the search string.
    file_limit UInt32(max_value=1000) = 1000::
        The maximum and default value is 1,000. No more than file_limit search
        results will be returned.

    optional:
        include_deleted Boolean = false::
            If this parameter is set to true, then files and folders that have been
            deleted will also be included in the search.
        include_membership Boolean = false::
            If true, metadata for a shared folder will include a list of the
            members of the shared folder.

struct SearchResults:

    has_more Boolean::
        If true, then the number of files found exceeds the file_limit.
    results List(data_type=Entry)::
        List of file or folders that match the search query.

    example default:
        has_more=false

op Search:
    doc::
        Returns metadata for all files and folders whose filename contains the
        given search string as a substring.

        Searches are limited to the folder path and its sub-folder hierarchy
        provided in the call.

    request:
        in SearchRequest

    response:
        out SearchResults

union PreviewError:
    not_found::
        The file wasn't found at the specified :field:`path`, or wasn't found
        at the specified :field:`path_rev`.
    no_preview::
        No preview has been generated yet or unable to generate a preview for
        the file.

op Preview:
    doc::
        Gets a preview for a file.

        The Content-Type header will be either application/pdf or text/html.
        There is an Original-Content-Length header which contains the size of
        the preview data.

    request:
        in InfoRequest

    response:
        out File
        data Binary

    error:
        PreviewError

    extras:
        host="content"

struct CopyRequest:

    from_path String::
        Specifies the file or folder to be copied.

    to_path String::
        Specifies the destination path, including the new name for the file or
        folder.

union CopyError:

    not_found::
        The source file wasn't found at the specified path.
    invalid_source::
        Trying to copy a shared folder.
    invalid_destination::
        There is already a file at the given destination.
    too_many_files::
        Too many files would be involved in the operation for it to complete
        successfully. The limit is currently 10,000 files and folders.

op Copy:
    doc::
        Copies a file or folder to a new location.

    request:
        in CopyRequest

    response:
        out File

    error:
        CopyError

op Move:
    doc::
        Moves a file or folder to a new location.

    request:
        in CopyRequest

    response:
        out File

    error:
        CopyError

struct FolderCreateRequest:

    path String::
        The path to the new folder to create.

union FolderCreateError:
    invalid_destination::
        There is already a file at the given destination.

op Folder-Create:
    doc::
        Creates a folder.

    request:
        in FolderCreateRequest

    response:
        out File

    error:
        FolderCreateError

struct DeleteRequest:

    path String::
        The path to the file or folder to be deleted.

union DeleteError:
    not_found::
        The source file wasn't found at the specified path.
    too_many_files::
        Too many files would be involved in the operation for it to complete
        successfully. The limit is currently 10,000 files and folders.

op Delete:
    doc::
        Deletes a file or folder.

    request:
        in DeleteRequest

    response:
        out File

    error:
        DeleteError
