namespace files

include v2_common

struct Photo
    doc:
        Photo-specific information derived from EXIF data.

    time_taken DbxTimestamp:
        When the photo was taken.
    lat_long List(data_type=Float32)|null:
        The GPS coordinates where the photo was taken.

    example default
        time_taken="Sat, 28 Jun 2014 18:23:21"
        lat_long=null

struct Video
    doc:
        Video-specific information derived from EXIF data.

    time_taken DbxTimestamp:
        When the photo was taken.
    lat_long List(data_type=Float32)|null:
        The GPS coordinates where the photo was taken.
    duration Float32:
        Length of video in milliseconds.

    example default
        time_taken="Sat, 28 Jun 2014 18:23:21"
        lat_long=null
        duration=3

union MediaInfo
    doc:
        Media specific information.

    photo Photo
    video Video

struct SharedFolder
    doc:
        Information specific to a shared folder.

    id String:
        The unique identifier for this shared folder.

    example default
        id="sf123"

# For fileid ancestry tree
struct Ancestor
    id String(max_length=40):
        A unique identifier for the ancestor.
    id_revision String(max_length=40):
        The revision of the ancestor.
    type String(max_length=15):
        The type of relationship with the descendant. Options are :val:`"move"`,
        :val:`"copy"` and :val:`"sharing_policy"`.

    example default
        id="xyz123"
        id_revision="rev456"
        type="copy"

# Parent struct for files or folders in a filesystem.
struct BaseFile
    doc:
        A file or folder entry.

    id String(max_length=40):
        A unique identifier for the file.
    id_revision UInt64:
        A unique identifier for the current revision of a file. This field is
        the same rev as elsewhere in the API and can be used to detect changes
        and avoid conflicts.
    path String:
        Path to file or folder.
    path_revision UInt64:
        A unique identifier for the current revision of a file path. This field
        is the same rev as elsewhere in the API and can be used to detect changes
        and avoid conflicts.
    modified DbxTimestamp|null:
        The last time the file was modified on Dropbox, in the standard Timestamp
        format (:val:`null` for root folder).
    is_deleted Boolean:
        Whether the given entry is deleted.
    ancestor Ancestor:
        The ancestor of this file or folder.
    read_only Boolean optional:
        For shared folders, this field specifies whether the user has
        read-only access to the folder. For files within a shared folder,
        this specifies the read-only status of the parent shared folder.

struct SharingUser

    account_id String:
        Account ID of the user.
    display_name String:
        Name of the user.
    same_team Boolean:
        Whether this user is part of the same team.

    example default
        account_id="8320432"
        display_name="John Doe"
        same_team=true

struct SharingUser

    account_id String:
        Account ID of the user.
    display_name String:
        Name of the user.
    same_team Boolean:
        Whether this user is part of the same team.

    example default
        account_id="8320432"
        display_name="John Doe"
        same_team=true

struct File extends BaseFile
    doc:
        Information about a file.

    size UInt64:
        File size in bytes.
    media_info MediaInfo optional:
        Information specific to photo and video media.
    parent_shared_folder_id String optional:
        For files within a shared folder, this field specifies the ID of
        the containing shared folder.
    modifier SharingUser optional:
        The user who last modified this file.

    example default
        id="xyz123"
        id_revision=2
        path="/Project/A/terms.docx"
        path_revision=19
        size=1234
        modified="Sat, 28 Jun 2014 18:23:21"
        is_deleted=false
        parent_shared_folder_id="abcd1234"

struct SharingMember

    user SharingUser:
        User information.
    role String:
        A user may be an :val:`"editor"`, :val:`"viewer"`, or :val:`"owner"`.
    active Boolean:
        Whether the user is an active member of the shared folder.

    example default
        role="owner"
        active=true

struct SharedFolder
    doc:
        Information specific to a shared folder.

    id String:
        The unique identifier for this shared folder.
    members List(data_type=SharingMember):
        List of members who have access to this folder.

    example default
        id="sf123"

struct Folder extends BaseFile
    doc:
        Information about a folder.

    shared_folder SharedFolder optional:
        If this is a shared folder, information about it.

    example default
        id="abc456"
        id_revision=3
        path="/Photos"
        path_revision=20
        modified="Sat, 28 Jun 2014 18:23:21"
        is_deleted=false

union Entry
    doc:
        A file or folder in a Dropbox.

    file File
    folder Folder

struct FolderAndContents extends Folder

    contents List(data_type=Entry):
        Ordered list of all contained files and folders.

    example default
        id="abc456"
        id_revision=3
        path="/Photos"
        path_revision=20
        modified="Sat, 28 Jun 2014 18:23:21"
        is_deleted=false

struct FolderListRequest
    doc:
        Stub.

    id String optional:
        The path to the folder.
    path String optional:
        The id of the folder.
    include_deleted Boolean = false optional:
        If this parameter is set to :val:`true`, then :field:`contents` will
        include the metadata of deleted children. Note that the target of the
        :route:`folder-list` call is always returned even when it has been
        deleted (with :field:`is_deleted` set to true) regardless of
        this flag.
    include_media_info Boolean = false optional:
        If true, each file will include a media_info key.

route Folder-List
    doc:
        Get the contents of a folder.

        Either a :field:`path` or :field:`id` must be specified.

    request
        in1 FolderListRequest

    response
        folder FolderAndContents

struct InfoRequest
    doc:
        Describes a path.

    path String:
        The path to the file or folder.
    path_revision Rev optional:
        Specific revision for a given path.

    example default
        path="/Photos/flower.jpg"

route Info
    doc:
        Get the info for a file or folder.

    request
        in1 InfoRequest

    response
        info Entry

route Download
    doc:
        Download a file.

    request
        in1 InfoRequest

    response
        info File
        data Binary

    extras
        host="content"
        method="GET"


struct UpdateParentRev
    doc:
        On a write conflict, overwrite the existing file if the parent revision
        matches.

    parent_revision String:
        The revision to be updated.
    auto_rename Boolean:
        Whether the new file should be renamed on a conflict.

    example default
        parent_revision="abc123"
        auto_rename=false

union WriteConflictPolicy
    doc:
        Policy for managing write conflicts.

    reject:
        On a write conflict, reject the new file.
    overwrite:
        On a write conflict, overwrite the existing file.
    rename:
        On a write conflict, rename the new file with a numerical suffix.
    update_if_matching_parent_rev UpdateParentRev:
        On a write conflict, overwrite the existing file.

struct FileUploadRequest
    doc:
        Stub.

    path String:
        The full path to the file you want to write to. It should not point to a folder.
    write_conflict_policy WriteConflictPolicy:
        Action to take if a file already exists at the specified path.

    example default
        path="Documents/plan.docx"

union UploadError
    doc:
        Errors that can be received on error.

    file_exists:
        File already exists.
    bad_path:
        Target folder does not exist.
    user_over_quota:
        The user does not have space in their Dropbox.

route Upload
    doc:
        Upload a file to Dropbox.

    request
        in1 FileUploadRequest
        in2 Binary

    response
        info File

    error
        UploadError

    extras
        host="content"

union PreviewError
    not_found:
        The file wasn't found at the specified :field:`path`, or wasn't found
        at the specified :field:`path_rev`.
    no_preview:
        No preview has been generated yet or unable to generate a preview for
        the file.

route Preview
    doc:
        Gets a preview for a file.

        The Content-Type header will be either application/pdf or text/html.
        There is an Original-Content-Length header which contains the size of
        the preview data.

    request
        in InfoRequest

    response
        out File
        data Binary

    error
        PreviewError

    extras
        host="content"

struct ThumbnailRequest
    doc:
        Stub.

    format String:
        jpeg (default) or png. For images that are photos, jpeg should be
        preferred, while png is better for screenshots and digital art.
    size String = "s" optional:
        One of the following values: xs, s, m, l, xl.

    example default
        format="jpeg"
        size="m"

route Thumbnail
    doc:
        Get the thumbnail for a file.

    request
        in1 ThumbnailRequest

    response
        info File
        data Binary

    extras
        host="content"

struct DeltaResponse

    reset Boolean:
        If :val:`true`, clear your local state. There will be no
        :field:`entries`. Then call :route:`delta` with no cursor. :field:`reset`
        will be :val:`true` only on rare occasions, such as after server or
        account maintenance, or if a user deletes their app folder.
    cursor String:
        A string that encodes the latest information that has been returned.
        On the next call to :route:`Delta`, pass in this value.
    has_more Boolean:
        If :val:`true`, then there are more entries available; you can call
        :route:`Delta` again immediately to retrieve those entries. If
        :val:`false`, then wait for at least five minutes (preferably longer)
        before checking again.
    entries List(data_type=Entry):
        Each file or directory that has been changed.


    example default
        reset=false
        cursor="xyz123"
        has_more=true


struct DeltaRequest
    doc:
        Delta request.

    cursor String|null:
        A string that is used to keep track of your current state. On the
        next call pass in this value to return delta entries that have been
        recorded since the cursor was returned.
    path_prefix String optional:
        Filters the response to only include entries at or under the specified
        path.
    include_media_info Boolean = false optional:
        If :val:`true`, each file will include a :field:`media_info` key. When
        :field:`include_media_info` is specified, files will only appear in
        delta responses when the media info is ready.
    include_membership Boolean = false optional:
        If true, each shared folder will include a list of the members of
        the shared folder.

    example default
        cursor=null
        path_prefix="/Photos"
        include_media_info=false
        include_membership=false

route Delta
    doc:
        A way of letting you keep up with changes to files and folders in a
        user's Dropbox. You can periodically call :route:`Delta` to get a list
        of "delta entries", which are instructions on how to update your local
        state to match the server's state.

    request
        in1 DeltaRequest

    response
        info DeltaResponse

struct LongpollDeltaRequest

    cursor String:
        A delta cursor as returned from a call to :route:`Delta`. Note that a
        cursor returned from a call to :route:`Delta` with
        :field:`include_media_info` set to :val:`true` is incompatible with
        :route:`LongpollDelta` and an error will be returned.

    timeout UInt32(min_value=30, max_value=480) = 30 optional:
        An optional integer indicating a timeout, in seconds. The request
        will block for at most this length of time, plus up to 90 seconds
        of random jitter added to avoid the
        :link:`thundering herd problem
        https://en.wikipedia.org/wiki/Thundering_herd_problem`. Care
        should be taken when using this parameter, as some network
        infrastructure does not support long timeouts.

struct LongpollDeltaResponse
    doc:
        The connection will block until there are changes available or a
        timeout occurs.

    changes Boolean:
        Indicates whether new changes are available. If this value is
        :val:`true`, you should call :route:`Delta` to retrieve the changes.
        If this value is :val:`false`, it means the call to
        :route:`LongpollDelta` timed out.

    backoff UInt32 optional:
        If present, the value indicates how many seconds your code should
        wait before calling :route:`LongpollDelta` again.

    example default
        changes=false
        backoff=60

route LongpollDelta
    doc:
        A long-poll endpoint to wait for changes on an account. In conjunction
        with :route:`Delta`, this call gives you a low-latency way to monitor an
        account for file changes.

        Unlike most other API endpoints, this call does not require OAuth
        authentication. The passed in :field:`cursor` can only be acquired via
        an authenticated call to :route:`Delta`.

    request
        in LongpollDeltaRequest

    response
        out LongpollDeltaResponse

    extras
        host="notify"
        noauth=true

struct RevisionHistory

    revisions List(data_type=Entry):
        List of file or folders that have been part of the revision history.

    example default
        pass

route Revisions
    doc:
        Obtains file information for previous revisions.

        Only revisions up to thirty days old are available (or more if the
        Dropbox user has :link:`Packrat https://www.dropbox.com/help/113`). You can use the revision number in
        conjunction with the :route:`Restore` call to revert the file to its
        previous state.

    request
        in1 InfoRequest

    response
        history RevisionHistory

struct RestoreRequest

    path String:
        The path to the file or folder.
    rev Rev:
        The revision of a path to restore to.

route Restore
    doc:
        Restores a file path to a previous revision.

        Unlike downloading a file at a given revision and then re-uploading it,
        this call is atomic. It also saves a bunch of bandwidth.

    request
        in RestoreRequest

    response
        out File

struct SearchRequest

    query String:
        The search string. This string is split (on spaces) into individual
        words. Files and folders will be returned if they contain all words
        in the search string.
    file_limit UInt32(max_value=1000) = 1000:
        The maximum and default value is 1,000. No more than file_limit search
        results will be returned.

    include_deleted Boolean = false optional:
        If this parameter is set to true, then files and folders that have been
        deleted will also be included in the search.
    include_membership Boolean = false optional:
        If true, metadata for a shared folder will include a list of the
        members of the shared folder.

struct SearchResults

    results List(data_type=Entry):
        List of file or folders that match the search query.

    example default
        pass

route Search
    doc:
        Returns metadata for all files and folders whose filename contains the
        given search string as a substring.

        Searches are limited to the folder path and its sub-folder hierarchy
        provided in the call.

    request
        in SearchRequest

    response
        out SearchResults

struct CopyRequest

    from_path String:
        Specifies the file or folder to be copied.

    to_path String:
        Specifies the destination path, including the new name for the file or
        folder.

union CopyError

    not_found:
        The source file wasn't found at the specified path.
    invalid_source:
        Trying to copy a shared folder.
    invalid_destination:
        There is already a file at the given destination.
    too_many_files:
        Too many files would be involved in the operation for it to complete
        successfully. The limit is currently 10,000 files and folders.

route Copy
    doc:
        Copies a file or folder to a new location.

    request
        in CopyRequest

    response
        out File

    error
        CopyError

route Move
    doc:
        Moves a file or folder to a new location.

    request
        in CopyRequest

    response
        out File

    error
        CopyError

struct FolderCreateRequest

    path String:
        The path to the new folder to create.

union FolderCreateError
    invalid_destination:
        There is already a file at the given destination.

route Folder-Create
    doc:
        Creates a folder.

    request
        in FolderCreateRequest

    response
        out File

    error
        FolderCreateError

struct DeleteRequest

    path String:
        The path to the file or folder to be deleted.

union DeleteError
    not_found:
        The source file wasn't found at the specified path.
    too_many_files:
        Too many files would be involved in the operation for it to complete
        successfully. The limit is currently 10,000 files and folders.

route Delete
    doc:
        Deletes a file or folder.

    request
        in DeleteRequest

    response
        out File

    error
        DeleteError

struct GetChildrenRequest

    id String:
        The ID whose children are returned.
    limit UInt32(max_value=100) = 100 optional:
        The maximum number of children that are returned.

struct ChildrenList

    results List(data_type=String):
        The IDs that are descendants of the query ID.

route Get-Children
    doc:
        Retrieves a file's children by ID.

    request
        in GetChildrenRequest

    response
        out ChildrenList

