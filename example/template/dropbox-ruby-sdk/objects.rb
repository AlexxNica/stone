# Generated by BabelSDK

require 'date'


module Dropbox
  module API

    # Converts a string date to a Date object
    def self.convert_date(str)
      Date.strptime(str, '%a, %d %b %Y %H:%M:%S +0000')
    end

    # The space quota info for a user.
    #
    # Fields:
    # * +quota+ (+UInt64+):
    #   The user's total quota allocation (bytes).
    # * +normal+ (+UInt64+):
    #   The user's used quota outside of shared folders (bytes).
    # * +shared+ (+UInt64+):
    #   The user's used quota in shared folders (bytes).
    # * +datastores+ (+UInt64+):
    #   The user's used quota in datastores (bytes).
    # * +opts+:
    #   Ignored
    class QuotaInfo
      attr_accessor :quota
      attr_accessor :normal
      attr_accessor :shared
      attr_accessor :datastores
    
      def initialize(
          quota,
          normal,
          shared,
          datastores = nil,
          opts = {}
      )
        @quota = quota
        @normal = normal
        @shared = shared
        @datastores = datastores
      end
    
      def self.from_hash(hash)
        self.new(
          hash['quota'],
          hash['normal'],
          hash['shared'],
          hash['datastores'],
        )
      end
    end
    
    # Information about a team.
    #
    # Fields:
    # * +name+ (+String+):
    #   The name of the team.
    # * +opts+:
    #   Ignored
    class Team
      attr_accessor :name
    
      def initialize(
          name,
          opts = {}
      )
        @name = name
      end
    
      def self.from_hash(hash)
        self.new(
          hash['name'],
        )
      end
    end
    
    # Information for a user's account.
    #
    # Fields:
    # * +referral_link+ (+String+):
    #   The user's referral link.
    # * +display_name+ (+String+):
    #   The full name of a user.
    # * +uid+ (+UInt64+):
    #   The user's unique Dropbox ID.
    # * +country+ (+String+):
    #   The user's two-letter country code, if available.
    # * +email+ (+String+):
    #   The user's e-mail address.
    # * +quota_info+ (+QuotaInfo+):
    #   The user's quota.
    # * +team+ (+Team+):
    #   If this paired account is a member of a team.
    # * +opts+:
    #   Ignored
    class AccountInfo
      attr_accessor :referral_link
      attr_accessor :display_name
      attr_accessor :uid
      attr_accessor :country
      attr_accessor :email
      attr_accessor :quota_info
      attr_accessor :team
    
      def initialize(
          referral_link,
          display_name,
          uid,
          country,
          email,
          quota_info,
          team = nil,
          opts = {}
      )
        @referral_link = referral_link
        @display_name = display_name
        @uid = uid
        @country = country
        @email = email
        @quota_info = quota_info
        @team = team
      end
    
      def self.from_hash(hash)
        self.new(
          hash['referral_link'],
          hash['display_name'],
          hash['uid'],
          hash['country'],
          hash['email'],
          QuotaInfo.from_hash(hash['quota_info']),
          hash.include?('team') && hash['team'] ? Team.from_hash(hash['team']) : nil,
        )
      end
    end
    



    # Photo-specific information derived from EXIF data.
    #
    # Fields:
    # * +time_taken+ (+Timestamp+):
    #   When the photo was taken.
    # * +lat_long+ (+List+):
    #   The GPS coordinates where the photo was taken.
    # * +opts+:
    #   Ignored
    class PhotoInfo
      attr_accessor :time_taken
      attr_accessor :lat_long
    
      def initialize(
          time_taken,
          lat_long = nil,
          opts = {}
      )
        @time_taken = time_taken
        @lat_long = lat_long
      end
    
      def self.from_hash(hash)
        self.new(
          hash.include?('time_taken') ? Dropbox::API::convert_date(hash['time_taken']) : nil,
          hash['lat_long'],
        )
      end
    end
    
    # Video-specific information derived from EXIF data.
    #
    # Fields:
    # * +time_taken+ (+Timestamp+):
    #   When the photo was taken.
    # * +lat_long+ (+List+):
    #   The GPS coordinates where the photo was taken.
    # * +duration+ (+Float+):
    #   Length of video in milliseconds.
    # * +opts+:
    #   Ignored
    class VideoInfo
      attr_accessor :time_taken
      attr_accessor :lat_long
      attr_accessor :duration
    
      def initialize(
          time_taken,
          lat_long = nil,
          duration = nil,
          opts = {}
      )
        @time_taken = time_taken
        @lat_long = lat_long
        @duration = duration
      end
    
      def self.from_hash(hash)
        self.new(
          hash.include?('time_taken') ? Dropbox::API::convert_date(hash['time_taken']) : nil,
          hash['lat_long'],
          hash['duration'],
        )
      end
    end
    
    # A file or folder entry.
    #
    # Fields:
    # * +path+ (+String+):
    #   Returns the canonical path to the file or directory.
    # * +size+ (+String+):
    #   A human-readable description of the file size (translated by locale).
    # * +bytes+ (+UInt64+):
    #   The file size in bytes.
    # * +is_dir+ (+Boolean+):
    #   Whether the given entry is a folder or not.
    # * +thumb_exists+ (+Boolean+):
    #   True if the file is an image that can be converted to a thumbnail via
    #   the /thumbnails call.
    # * +icon+ (+String+):
    #   The name of the icon used to illustrate the file type in Dropbox's
    #   icon library.
    # * +root+ (+String+):
    #   The root or top-level folder depending on your access level. All paths
    #   returned are relative to this root level. Permitted values are either
    #   dropbox or app_folder.
    # * +hash+ (+String+):
    #   A folder's hash is useful for indicating changes to the folder's
    #   contents in later calls to /metadata. This is roughly the folder
    #   equivalent to a file's rev.
    # * +is_deleted+ (+Boolean+):
    #   Whether the given entry is deleted.
    # * +modified+ (+Timestamp+):
    #   The last time the file was modified on Dropbox, in the standard
    #   Timestamp format (null for root folder).
    # * +rev+ (+String+):
    #   A unique identifier for the current revision of a file. This field is
    #   the same rev as elsewhere in the API and can be used to detect changes
    #   and avoid conflicts.
    # * +revision+ (+String+):
    #   A deprecated field that semi-uniquely identifies a file. Use rev
    #   instead.
    # * +client_mtime+ (+String+):
    #   For files, this is the modification time set by the desktop client
    #   when the file was added to Dropbox, in the standard date format. Since
    #   this time is not verified (the Dropbox server stores whatever the
    #   desktop client sends up), this should only be used for display
    #   purposes (such as sorting) and not, for example, to determine if a
    #   file has changed or not.
    # * +photo_info+ (+PhotoInfo+):
    #   Only returned when the include_media_info parameter is true and the
    #   file is an image.
    # * +video_info+ (+VideoInfo+):
    #   Only returned when the include_media_info parameter is true and the
    #   file is a video.
    # * +opts+:
    #   Ignored
    class EntryInfo
      attr_accessor :path
      attr_accessor :size
      attr_accessor :bytes
      attr_accessor :is_dir
      attr_accessor :thumb_exists
      attr_accessor :icon
      attr_accessor :root
      attr_accessor :hash
      attr_accessor :is_deleted
      attr_accessor :modified
      attr_accessor :rev
      attr_accessor :revision
      attr_accessor :client_mtime
      attr_accessor :photo_info
      attr_accessor :video_info
    
      def initialize(
          path,
          size,
          bytes,
          is_dir,
          thumb_exists,
          icon,
          root,
          hash = nil,
          is_deleted = nil,
          modified = nil,
          rev = nil,
          revision = nil,
          client_mtime = nil,
          photo_info = nil,
          video_info = nil,
          opts = {}
      )
        @path = path
        @size = size
        @bytes = bytes
        @is_dir = is_dir
        @thumb_exists = thumb_exists
        @icon = icon
        @root = root
        @hash = hash
        @is_deleted = is_deleted
        @modified = modified
        @rev = rev
        @revision = revision
        @client_mtime = client_mtime
        @photo_info = photo_info
        @video_info = video_info
      end
    
      def self.from_hash(hash)
        self.new(
          hash['path'],
          hash['size'],
          hash['bytes'],
          hash['is_dir'],
          hash['thumb_exists'],
          hash['icon'],
          hash['root'],
          hash['hash'],
          hash['is_deleted'],
          hash.include?('modified') ? Dropbox::API::convert_date(hash['modified']) : nil,
          hash['rev'],
          hash['revision'],
          hash['client_mtime'],
          hash.include?('photo_info') && hash['photo_info'] ? PhotoInfo.from_hash(hash['photo_info']) : nil,
          hash.include?('video_info') && hash['video_info'] ? VideoInfo.from_hash(hash['video_info']) : nil,
        )
      end
    end
    
    # A file or folder entry.
    #
    # Fields:
    # * +contents+ (+List+):
    #   Folder contents.
    # * +opts+:
    #   Ignored
    class FileOrFolderInfo < EntryInfo
      attr_accessor :contents
    
      def initialize(
          path,
          size,
          bytes,
          is_dir,
          thumb_exists,
          icon,
          root,
          hash = nil,
          is_deleted = nil,
          modified = nil,
          rev = nil,
          revision = nil,
          client_mtime = nil,
          photo_info = nil,
          video_info = nil,
          contents = nil,
          opts = {}
      )
        @path = path
        @size = size
        @bytes = bytes
        @is_dir = is_dir
        @thumb_exists = thumb_exists
        @icon = icon
        @root = root
        @hash = hash
        @is_deleted = is_deleted
        @modified = modified
        @rev = rev
        @revision = revision
        @client_mtime = client_mtime
        @photo_info = photo_info
        @video_info = video_info
        @contents = contents
      end
    
      def self.from_hash(hash)
        self.new(
          hash['path'],
          hash['size'],
          hash['bytes'],
          hash['is_dir'],
          hash['thumb_exists'],
          hash['icon'],
          hash['root'],
          hash['hash'],
          hash['is_deleted'],
          hash.include?('modified') ? Dropbox::API::convert_date(hash['modified']) : nil,
          hash['rev'],
          hash['revision'],
          hash['client_mtime'],
          hash.include?('photo_info') && hash['photo_info'] ? PhotoInfo.from_hash(hash['photo_info']) : nil,
          hash.include?('video_info') && hash['video_info'] ? VideoInfo.from_hash(hash['video_info']) : nil,
          hash['contents'].collect { |elem| EntryInfo.from_hash(elem) },
        )
      end
    end
    


  end
end