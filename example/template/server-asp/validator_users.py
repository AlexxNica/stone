# Auto-generated by Babel (Do not modify)
from dropbox import arg_struct_parser as asp

# We use an identity function because we don't need to mutate the return value
# of the parser in any way.
def identity(x):
    return x

users_empty_validator = asp.Record(
)

users_space_validator = asp.Record(
    # The user's total quota allocation (bytes).

    ('quota', asp.Nat()),
    # The user's used quota outside of shared folders (bytes).

    ('private', asp.Nat()),
    # The user's used quota in shared folders (bytes).

    ('shared', asp.Nat()),
    # The user's used quota in datastores (bytes).

    ('datastores', asp.Nat()),
)

users_team_validator = asp.Record(
    # The team's unique ID.

    ('id', asp.StringB()),
    # The name of the team.

    ('name', asp.StringB()),
)

users_name_validator = asp.Record(
    # Also known as a first name.

    ('given_name', asp.StringB()),
    # Also known as a last name or family name.

    ('surname', asp.StringB()),
    # Locale-dependent familiar name. Generally matches :field:`given_name` or
    # :field:`display_name`.

    ('familiar_name', asp.StringB()),
    # A name that can be used directly to represent the name of a user's Dropbox
    # account.

    ('display_name', asp.StringB()),
)

users_basic_account_info_validator = asp.Record(
    # The user's unique Dropbox ID.

    ('account_id', asp.StringB(min_length=40, max_length=40)),
    # Details of a user's name.

    ('name', users_name_validator),
)

users_me_info_validator = asp.Record(
    # The user's e-mail address.

    ('email', asp.StringB()),
    # The user's two-letter country code, if available.

    ('country', asp.Nullable(asp.StringB(min_length=2, max_length=2))),
    # The language setting that user specified.

    ('locale', asp.StringB(min_length=2, max_length=2)),
    # The user's :link:`referral link https://www.dropbox.com/referrals`.

    ('referral_link', asp.StringB()),
    # The user's quota.

    ('space', users_space_validator),
    # If this account is a member of a team.

    ('team', users_team_validator),
    # Whether the user has a personal and work account. If the authorized
    # account is personal, then :field:`team` will always be :val:`Null`, but
    # :field:`is_paired` will indicate if a work account is linked.

    ('is_paired', asp.Boolean()),
)

users_account_info_validator = asp.Variant(
    ('me', identity, users_me_info_validator),
    ('teammate', identity, users_basic_account_info_validator),
    ('user', identity, users_basic_account_info_validator),
)

users_info_request_validator = asp.Record(
    # A user's account identifier. Use :val:`"me"` to get information for the
    # current account.

    ('account_id', asp.StringB(min_length=40, max_length=40)),
)

users_info_error_validator = asp.Variant(
    # The specified :field:`account_id` does not exist.

    ('no_account', identity, object()),
)

